#! /usr/local/bin/clisp
; character encoding for reading files and printing
(setf *encoding* :utf-8)

; prime the RNG
(setf *random-state* (make-random-state t))

; modulus for random data
(setf *max-int* 128)

; print CLI help test
(defun print-usage ()
  (format *standard-output* (concatenate 'string
    "Usage: otter [command]~%~%"
    "Commands:~%"
    "  help                           display this message~%"
    "  gen [bytes=4096]               generate [bytes] of random data~%"
    "  enc [input] [pad] [offset=0]   encrypt [input] file with [pad] file starting at [offset] bytes of [pad] file~%"
    "  dec [input] [pad] [offset=0]   decrypt [input] file with [pad] file starting at [offset] bytes of [pad] file~%")))

; helper functions for conversion between octets and characters
(defun encoding-keyword-to-native (encoding)
  (intern (string encoding) (find-package :charset)))
(defun %string-to-octets (string encoding)
  (ext:convert-string-to-bytes string (encoding-keyword-to-native encoding)))
(defun %octets-to-string (octets encoding)
  (ext:convert-string-from-bytes octets (encoding-keyword-to-native encoding)))

; arithmetic modulus helper function
(defmacro modo (o a b c)
  `(mod (funcall (symbol-function ,o) (mod ,a ,c) (mod ,b ,c)) ,c))

; generate a random list of *max-int* integers
(defun randlist (size)
  (let ((lst ()))
    (dotimes (i size)
      (setf lst (cons (random *max-int*) lst)))
  lst))

; generate random data
(defun gen (size-string)
  (when (null size-string)
    (setf size-string "4096"))
  (setf size (parse-integer size-string :junk-allowed t))
  (unless (numberp size)
    (error "size must be a number"))
  (defvar buffer (randlist size))
  (princ (%octets-to-string (coerce buffer 'vector) *encoding*)))

; encrypt or decrypt an input file with a pad file at an offset of the pad
(defun cry (modop input-path pad-path offset-string)
  (when (null input-path)
    (error "must supply input path"))
  (when (null pad-path)
    (error "must supply pad path"))
  (when (null offset-string)
    (setf offset-string "0"))
  (setf offset (parse-integer offset-string :junk-allowed t))
  (unless (numberp offset)
    (error "offset must be a number"))
  (with-open-file (input input-path)
    (with-open-file (pad pad-path)
      (setq input-buffer (%string-to-octets (read-line input) *encoding*))
      (setq pad-buffer (%string-to-octets (read-line pad) *encoding*))
      (setq output-buffer '())
      (when (> (+ offset (length input-buffer)) (length pad-buffer))
        (error "offset is too large for pad"))
      (dotimes (i (length input-buffer))
        (setf x (elt input-buffer i))
        (setf y (elt pad-buffer (+ i offset)))
        (setf cur (modo modop x y *max-int*))
        (setf output-buffer (append output-buffer (list cur))))
      (princ (%octets-to-string (coerce output-buffer 'vector) *encoding*)))))

; main function
(defun main (args)
  (let (
    (op (first args))
    (input (second args))
    (pad (third args))
    (offset (fourth args)))
    (block nil
      (when (or (null op) (string= op "help"))
        (return (print-usage)))
      (when (string= op "gen")
        (return (gen input)))
      (when (string= op "enc")
        (return (cry '+ input pad offset)))
      (when (string= op "dec")
        (return (cry '- input pad offset)))
      (error (concatenate 'string "unknown operation " op))
    )))

; go
(main *args*)
